
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library grlib;
use grlib.amba.all;
use grlib.stdlib.all;
use grlib.devices.all;
library gaisler;
use gaisler.misc.all;
library UNISIM;
use UNISIM.VComponents.all;

entity AHB_bridge is
  port(
    -- Clock and Reset -----------------
    clkm : in std_logic;
    rstn : in std_logic;
 -- AHB Master records --------------
    ahbmi : in ahb_mst_in_type;
    ahbmo : out ahb_mst_out_type;
 -- ARM Cortex-M0 AHB-Lite signals -- 
    HADDR : in std_logic_vector (31 downto 0); -- AHB transaction address
    HSIZE : in std_logic_vector (2 downto 0); -- AHB size: byte, half-word or word
    HTRANS : in std_logic_vector (1 downto 0); -- AHB transfer: non-sequential only
    HWDATA : in std_logic_vector (31 downto 0); -- AHB write-data
    HWRITE : in std_logic; -- AHB write control
    HRDATA : out std_logic_vector (31 downto 0); -- AHB read-data
    HREADY : out std_logic -- AHB stall signal
    
----other signals-----
    dmai:
    dmao:
    ahbo:
    ahbi:
 );
end;

architecture structural of AHB_bridge is
--declare a component for state_machine
  component state_machine
    port(
      HADDR : out std_logic_vector (31 downto 0); 
      HSIZE : out std_logic_vector (2 downto 0);
      HTRANS : out std_logic_vector (1 downto 0);
      HWDATA : out std_logic_vector (31 downto 0); 
      HWRITE : out std_logic;
      HREADY : in std_logic;
      
      clkm : out std_logic;
      rstn : out std_logic;
    );
  end:
 
--declare a component for ahbmst 
  component ahbmst
    port(
      ahbmi : out ahb_mst_in_type;
      ahbmo : in ahb_mst_out_type;
      
      clkm : out std_logic;
      rstn : out std_logic;
    );
  end;
  
      

--declare a component for data_swapper 
  component data_swapper
    port(
      HRDATA : in std_logic_vector (31 downto 0);
      
    );
  end;
  
      
 
signal dmai : ahb_dma_in_type;
signal dmao : ahb_dma_out_type;

----these two signal is use to distinguish between input signal and output signal------
signal dmai0 : ahb_dma_in_type;
signal dmao0 : ahb_dma_out_type;

begin
--instantiate state_machine component and make the connections
  B0 : state_machine
      PORT MAP(
        HADDR => HADDR;
        HSIZE => HSIZE;
        HTRANS => HTRANS;
        HWDATA => HWDATA;
        HREADY => HREADY;
        dmao0 => dmao;
        dmai => dmai0;
      );
    end;
    
  B1 : data_swapper
      PORT MAP(
        HRDATA => HRDATA;
        dmao0 => dmao;
      );
    end;
    
  B2 : ahbmst
      PORT MAP(
        clkm => clk;
        rstn => rst;
        ahbo => ahbmo(0);
        ahbmi => ahbi;
        dmao => dmao0;
        dmai0 => dmai;
      );
    end;
    
        
        
        
    
        
        
--instantiate the ahbmst component and make the connections 
--instantiate the data_swapper component and make the connections
end structural;
  

